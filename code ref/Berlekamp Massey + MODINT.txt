struct ModInt
{
	int x;
	ModInt(int x = 0) : x(x + (x < 0) * MOD - (x >= MOD) * MOD) {}
	ModInt operator+(ModInt o) { return x + o.x; }
	ModInt operator-(ModInt o) { return x - o.x; }
	ModInt operator*(ModInt o) { return 1LL * x * o.x % MOD; }
	ModInt operator/(ModInt b) { return *this * b.inv(); }
	ModInt inv() { return pow(MOD - 2); }
	ModInt pow(long long e)
	{
		if (!e)
			return ModInt(1);
		ModInt r = pow(e / 2);
		r = r * r;
		return e % 2 ? *this * r : r;
	}
	bool operator==(ModInt o) { return x == o.x; }
};

vector<ModInt> BerlekampMassey(vector<ModInt> s)
{
	int n = s.size();
	vector<ModInt> C(n), B(n);
	C[0] = B[0] = 1;

	auto b = C[0];
	int L = 0;
	for (int i = 0, m = 1; i < n; ++i)
	{
		auto d = s[i];
		for (int j = 1; j <= L; ++j)
			d = d + C[j] * s[i - j];
		if (d == 0)
		{
			++m;
			continue;
		}
		/// C -= d / b * B * X^m
		auto T = C;
		auto coef = d / b;
		for (int j = m; j < n; ++j)
			C[j] = C[j] - coef * B[j - m];
		if (2 * L > i)
		{
			++m;
			continue;
		}
		L = i + 1 - L;
		B = T;
		b = d;
		m = 1;
	}
	C.resize(L + 1);
	C.erase(C.begin());
	for (auto &x : C)
		x = x * (-1);
	return C;
}

using Poly = vector<ModInt>;

Poly LinearRec(Poly trans, int k)
{
	int n = trans.size();
	Poly r(n + 1), b(r);
	r[0] = b[1] = 1;
	auto ans = b[0];

	auto combine = [&](Poly a, Poly b) { // a * b mod trans
		Poly res(n * 2 + 1);
		for (int i = 0; i <= n; ++i)
			for (int j = 0; j <= n; ++j)
				res[i + j] = res[i + j] + a[i] * b[j];
		for (int i = 2 * n; i > n; --i)
			for (int j = 0; j < n; ++j)
				res[i - 1 - j] = res[i - 1 - j] + res[i] * trans[j];
		res.resize(n + 1);
		return res;
	};
	for (++k; k; k /= 2)
	{
		if (k % 2)
			r = combine(r, b);
		b = combine(b, b);
	}
	return r;
}
ll check[300];
vector<ll> adj[300];
ll n, m, q;
ll get(ll a, ll k)
{
	vector<ModInt>v;
	fill(check, check + n, -1);
	vector<ll>q, nxt;
	q.push_back(a);
	v.push_back(1);
	ll turn = 0;
	while (v.size() < n * 3) {
		if (!q.size()) {
			v.push_back(nxt.size());
			swap(nxt, q);
		}
		else {
			ll cur = q.back();
			q.pop_back();
			for (auto &val : adj[cur]) {
				if (check[val] != v.size()) {check[val] = v.size(); nxt.push_back(val);}
			}
		}
	}
	// f(i, v.size()) cout << v[i].x << " ";
	// cout << '\n';
	// if (k < v.size()) return v[k].x;
	vector<ModInt> t = BerlekampMassey(v);
	vector<ModInt> c = LinearRec(t, k);
	// for (auto &val : c) cout << val.x << " ";
	// cout << '\n';
	if (k <= v.size()) return v[k].x;
	ll ret = 0;
	f(i, t.size()) {
		ret += c[i + 1].x * v[i].x;
	}
	return ret;
}