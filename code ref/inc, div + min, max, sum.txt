#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

struct qhash
{
    static uint64_t splitmix64(uint64_t x)
    {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x)
        const
    {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};

typedef long long ll;
typedef bool bl;
typedef string str;
typedef unsigned long long ull;
typedef double db;

#define fi first
#define se second
#define mp(p1, p2) make_pair(p1, p2)
#define f(i, n) for (ll i = 0; i < n; i += 1)
#define fv(i, v) for (typeof(v.begin()) i = v.begin(); i != v.end(); i++)
#define fu(i, start, end) for (int i = start; i < end; i += 1)
#define fd(i, start, end) for (int i = start; i >= end; i -= 1)
#define BIT(var, pos) ((bool)((var) & (1 << (pos))))
#define pb push_back
#define ordered_set tree<pair<ll, ll>, null_type, less<pair<ll, ll>>, rb_tree_tag, tree_order_statistics_node_update>

#define MOD 1000000009
#define MIN -100000000000
#define vv vector<vector<ll>>
#define pv vector<pair<ll, ll>>
#define MAXN 100000
ll n, m;
ll st[600000], lo[600000], hi[600000];
ll lazy[300000];
ll h;
void apply(ll i, ll x, ll k)
{
    st[i] += x * k;
    lo[i] += x;
    hi[i] += x;
    if (i < n)
        lazy[i] += x;
}
void calc(ll i)
{
    //if (i == 3) cout << st[i << 1] + st[i << 1 | 1] << '\n';
    st[i] = st[i << 1] + st[i << 1 | 1];
    lo[i] = min(lo[i << 1], lo[i << 1 | 1]);
    hi[i] = max(hi[i << 1], hi[i << 1 | 1]);
}
void push(ll i)
{
    i += n;
    for (int s = h; s > 0; s--)
    {
        ll loc = i >> s;
        ll pw = 1 << (s - 1);
        if (lazy[loc])
        {
            apply(loc << 1, lazy[loc], pw);
            apply(loc << 1 | 1, lazy[loc], pw);
            lazy[loc] = 0;
        }
    }
}
void build(ll i)
{
    i += n;
    ll k = 1;
    while (i > 1)
    {
        i >>= 1;
        k <<= 1;
        calc(i);
        st[i] += lazy[i] * k;
        lo[i] += lazy[i];
        hi[i] += lazy[i];
    }
}
void construct()
{
    fd(i, n - 1, 0)
        calc(i);
}
void dig(ll i, ll d, ll k)
{
    // f(j, n)
    // {
    //     push(j);
    //     cout << j + n << " ";
    //     cout << lo[j + n] << ",";
    // }
    // cout << '\n';
    if (hi[i] - floor((db)hi[i] / d) == lo[i] - floor((db)lo[i] / d))
        apply(i, -lo[i] + floor((db)lo[i] / d), k);
    
    else
    {
        if (lazy[i])
        {
            apply(i << 1, lazy[i], k >> 1);
            apply(i << 1 | 1, lazy[i], k >> 1);
            lazy[i] = 0;
        }
        dig(i << 1, d, k >> 1);
        dig(i << 1 | 1, d, k >> 1);
        calc(i);
    }
}
void add_update(ll l, ll r, ll val)
{
    push(l);
    push(r - 1);
    ll sl = l, sr = r;
    ll k = 1;
    for (l += n, r += n; l < r; l >>= 1, r >>= 1, k <<= 1)
    {
        if (l & 1)
            apply(l++, val, k);
        if (r & 1)
            apply(--r, val, k);
    }
    build(sl);
    build(sr - 1);
}
void div_update(ll l, ll r, ll val)
{
    push(l);
    push(r - 1);
    ll sl = l, sr = r;
    ll k = 1;
    for (l += n, r += n; l < r; l >>= 1, r >>= 1, k <<= 1)
    {
        if (l & 1)
            dig(l++, val, k);
        if (r & 1)
            dig(--r, val, k);
    }
    build(sl);
    build(sr - 1);
}
ll squery(ll l, ll r)
{
    ll res = 0;
    push(l);
    push(r - 1);
    for (l += n, r += n; l < r; l >>= 1, r >>= 1)
    {
        if (l & 1)
            res += st[l++];
        if (r & 1)
            res += st[--r];
    }
    return res;
}
ll mquery(ll l, ll r)
{
    ll res = LLONG_MAX;
    push(l);
    push(r - 1);
    for (l += n, r += n; l < r; l >>= 1, r >>= 1)
    {
        if (l & 1)
            res = min(lo[l++], res);
        if (r & 1)
            res = min(lo[--r], res);
    }
    return res;
}
void solve()
{
    cin >> n >> m;
    h = sizeof(int) * 8 - __builtin_clz(n);
    ll a;
    f(i, n)
    {
        cin >> a;
        apply(i + n, a, 1);
    }
    construct();
    ll op, l, r, c;
    f(i, m)
    {
        
        cin >> op;
        if (op == 1)
        {
            cin >> l >> r >> c;
            add_update(l, r + 1, c);
            //construct();
        }
        else if (op == 2)
        {
            cin >> l >> r >> c;
            div_update(l, r + 1, c);
        }
        else if (op == 3)
        {
            cin >> l >> r;
            cout << mquery(l, r + 1) << '\n';
        }
        else
        {
            cin >> l >> r;
            cout << squery(l, r + 1) << '\n';
        }
    }
}
int main()
{

    // freopen("SEQUENCE.INP", "r" ,stdin); freopen("SEQUENCE.OUT", "w", stdout);
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    long long test = 1;

    // cin >> test;
    for (int i = 0; i < test; i += 1)
    {
        solve();
    }
    return 0;
}
