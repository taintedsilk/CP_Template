#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/random>

using namespace std;
using namespace __gnu_pbds;
using ll = long long;
using bl = bool;
using str = string;
using ull = unsigned long long;
using db = double;
struct qhash
{
    static uint64_t splitmix64(uint64_t x)
    {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x)
        const
    {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};


#define f(i, n) for (ll i = 0; i < n; i += 1)
#define fu(i, start, end) for (int i = start; i < end; i ++)
#define fd(i, start, end) for (int i = start; i >= end; i --)
#define all(v) v.begin(), v.end()
#define fi first
#define se second
#define pb push_back
#define mp(p1, p2) make_pair(p1, p2)
#define BIT(var, pos) (var >> pos) & 1
#define ordered_set tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update>

#define MOD 1000000007
/// ********
uint64_t timeSinceEpochMillisec()
{
    using namespace std::chrono;
    return duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();
}
int time() {
    using namespace std::chrono;
    return duration_cast<seconds>(system_clock::now().time_since_epoch()).count();
}
__gnu_cxx::sfmt19937 rng(timeSinceEpochMillisec());
void solve() {
    
}
int main()
{

    // freopen("SUMC.INP", "r" ,stdin);
    //freopen("what.out", "w", stdout);
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    long long t = 1;

    // cin >> t;
    for (int i = 0; i < t; i += 1)
    {
        solve();
        // std::cout << "\n";
    }
    return 0;
}