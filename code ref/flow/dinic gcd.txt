ll arr[100];
struct flow_edge{
    int a, b;
    ll cap;
    flow_edge(int a, int b, int cap) : a(a), b(b), cap(cap) {} 
};
struct dinic{
    int n, st, ed;
    vector<vector<int>>adj;
    vector<flow_edge> edges;
    vector<int>h;  
    vector<int>dx;
    dinic(int n, int st, int ed) : n(n), st(st), ed(ed) {
        adj.resize(n);
        h.resize(n);
        dx.resize(n);
        
    }
    void add_edge(int a, int b, int c) {
        adj[a].push_back(edges.size());
        edges.push_back({a, b, c});
        adj[b].push_back(edges.size());
        edges.push_back({b, a, 1});
    }
    bl bfs() {
        fill(h.begin(), h.end(), -1);
        h[st] = 0;
        queue<pair<int, ll>>q;
        q.push({st, 0}); 
        while (q.size()) {
            int cur = q.front().fi, flow = q.front().se;
            q.pop();
            for (auto &val : adj[cur]) {
                flow_edge &e = edges[val];
                ll nflow = __gcd<ll>(flow, e.cap);
                if (h[e.b] == -1 && nflow > 1) {
                    h[e.b] = h[cur] + 1;
                    if (e.b == ed) return 1;
                    q.push({e.b, nflow});
                }
            }
        }
        return 0;
    }
    ll dfs(int a, ll mx) {
        if (mx == 1) return 1;
        else if (a == ed) return mx;
        for (;dx[a] < adj[a].size(); dx[a]++) {
            flow_edge &e = edges[adj[a][dx[a]]];
            if (e.cap > 1 && h[e.b] == h[a] + 1) {
                ll val = dfs(e.b, __gcd<ll>(mx, e.cap));
                if (val > 1) {
                    e.cap /= val;
                    edges[adj[a][dx[a]] ^ 1].cap *= val;
                    return val;
                }
            }
        }
        return 1;
    }
    ll get_flow() {
        while (bfs()) {
            fill(dx.begin(), dx.end(), 0);
            while (dfs(st, 0) > 1) {
            }
        }        
        ll res = 0;
        for (auto &val : adj[st]) {
            flow_edge &e = edges[val];
            
            ll div = arr[e.b] / e.cap;
            for (int i = 2; i * i <= div; i += 1) {
                while (div % i == 0) {
                    div /= i;
                    res++;
                }
            }
            if (div > 1) res++;
        }
        return res;
    }
};